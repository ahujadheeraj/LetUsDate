var express = require("express");var bodyParser = require("body-parser");var mongoose = require("mongoose");var User = require("./models/user.js");var bcrypt = require("bcryptjs");var jwt = require("jwt-simple");var cookieParser = require('cookie-parser');var socketio = require('socket.io');var http = require('http');var app = express();app.use(cookieParser());var server = http.createServer(app)var io = socketio(server)let usersockets = {}var JWT_SECRET = "my-secret";var payload = { foo: 'bar' };app.set("view engine","ejs");app.use(express.static(__dirname + "/public"));app.use(bodyParser.urlencoded({extended:true}));mongoose.Promise = global.Promise;mongoose.connect("mongodb://localhost:27017/letusdate",{useNewUrlParser:true});app.get("/",(req,res)=>{    res.render("home");})app.get("/signup",(req,res)=>{    res.render("signup");})app.post("/signup",(req,res)=>{    User.findOne({name:req.body.username},(err,user)=> {        if (err) {            res.send("something went wrong");        }        if (user) {            res.send("user exists "+                " go back and try with different username");        }        if (!user) {            bcrypt.genSalt(10, function (err, salt) {                bcrypt.hash(req.body.password, salt, function (err, hash) {                    var newUser = {                        name: req.body.username,                        password: hash,                        image: req.body.image                    }                    User.create(newUser, (err, user) => {                        if (err) console.log(err);                        else {                            console.log(user.name);                            console.log((user.password));                            console.log((user.image));                            res.redirect("/login");                        }                    })                });            });        }    })})app.get("/login",(req,res)=>{    res.render("login");})app.post("/login",(req,res)=>{    User.findOne({name:req.body.username},(err,user)=>{        if(err || !user){            res.send("no such user exists")        }else{           /* if(!user.password){                res.send("no such username or password exists")            }            else {*/                bcrypt.compare(req.body.password, user.password, function (err, result) {                    if (result) {                        // encode                        var mytoken = jwt.encode(user, JWT_SECRET);                        //console.log(mytoken);                        res.cookie('auth', mytoken, {                            httpOnly: false                        });                       // console.log(res.cookie());                        res.redirect("/secret");                    }                });                }        //}    })})app.get("/secret",(req,res)=>{    var token = req.cookies.auth;    //console.log(token);    // decode token    if (token) {        var decoded = jwt.decode(token, JWT_SECRET);        User.find({},function(err,allusers){            if(err){                console.log(err);            }            else{                //console.log(decoded.name);               // console.log(allusers);                res.render("secret",{users:allusers,currentUser:decoded.name});            }        })    } else {        return res.status(403).send('No token');    }})io.on('connection', (socket) => {    console.log("New socket formed from " + socket.id)    io.emit('connected')    socket.on('user', (data) => {        // username is in data.user        console.log(data.user)        usersockets[data.user] = socket.id        console.log(usersockets)    })    socket.on('like', (data) => {        // username is in data.user        var myuser  = data.user+"@gmail.com";        myuser = myuser.replace(/\s/g,'');        console.log(myuser);        io.to(usersockets[data.cuser]).emit('like_msg', data)        console.log(data.message)        console.log(usersockets[data.cuser])    })    socket.on('superlike', (data) => {        // username is in data.user        var myuser  = data.user+"@gmail.com";        myuser = myuser.replace(/\s/g,'');        User.findOne({name:myuser},(err,user)=>{            if(user){                console.log("hhhhhhhhhhhhhh")                console.log(user.image);                data.image = user.image;                io.to(usersockets[data.cuser]).emit('superlike_msg',data )                console.log(data.message)                console.log(usersockets[data.cuser])            }        })    })    socket.on('block', (data) => {        // username is in data.user        var myuser  = data.user+"@gmail.com";        myuser = myuser.replace(/\s/g,'');        console.log("myuser");        console.log(myuser);        var blockuser = data.cuser+"@gmail.com";        blockuser = blockuser.replace(/\s/g,'');        console.log("blockuser");        console.log(blockuser);    })})app.get("/logout",(req,res)=>{    res.clearCookie('auth',{        httpOnly : false    });    res.redirect("/");})server.listen(9999,()=>console.log("server has started!!!!!"))